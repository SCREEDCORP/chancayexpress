// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model ProductRequest {
  id          String               @id @default(uuid())
  status      ProductRequestStatus
  quantity    Int
  description String?
  code        String               @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])
  // userId String
  // user   User   @relation(fields: [userId], references: [id])

  @@map("product_requests")
}

model Product {
  id          String   @id @default(uuid())
  status      Boolean  @default(true)
  name        String
  image       String?
  costInCents Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  requests ProductRequest[]

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("products")
}

model User {
  id            String    @id @default(uuid())
  type          UserType
  name          String?
  nameHandler   String?   @unique
  email         String?   @unique
  description   String?
  direction     String?
  phone         String?
  emailVerified DateTime?
  image         String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  products Product[]
  // productRequests ProductRequest[]

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  expires_in        Int?
  ext_expires_in    Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserType {
  USER
  STORE

  @@map("user_types")
}

enum ProductRequestStatus {
  INACTIVE
  IN_CHICKEN
  TO_DELIVER

  @@map("product_request_statuses")
}
